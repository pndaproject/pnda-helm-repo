## ----------------------------
## PNDA Components Configuration
## ----------------------------

serviceAccountName: pnda
roleName: pnda-role
roleBindingName: pnda

monitoring:
  prometheusOperator:
    enabled: false

redis:
  enabled: true
  usePassword: false

consoleBackendDataLogger:
  image: pnda/console-backend-data-logger:release5.0
  imagePullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3001
  resources:
    requests:
      memory: "128Mi"
      cpu: "10m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
consoleBackendDataManager:
  image: pnda/console-backend-data-manager:release5.0
  imagePullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3123
  resources:
    requests:
      memory: "128Mi"
      cpu: "10m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
consoleFrontend:
  image: pnda/console-frontend:release5.0
  imagePullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
  conf:
    logLevel: INFO
    edgeNode: ""
    hdfsLink: "http://hdfs.pnda.io"
    kafkaManagerLink: "http://kafka-manager.pnda.io"
    grafanaLink: "http://grafana.pnda.io"
    kibanaLink: "http://kibana.pnda.io"
    jupyterLink: "http://notebooks.pnda.io"
    httpfsLink: ""
  resources:
    requests:
      memory: "128Mi"
      cpu: "10m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
  ingress:
    enabled: true
    path: /
    hosts:
      - console.pnda.io
dataService:
  image: pnda/data-service:release5.0
  imagePullPolicy: Always
  service:
    type: ClusterIP
    port: 7000
  conf:
    logLevel: INFO
  resources:
    requests:
      memory: "128Mi"
      cpu: "10m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
deploymentManager:
  image: pnda/platform-deployment-manager:release5.0
  imagePullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 5000
  conf:
    logLevel: INFO
  resources:
    requests:
      memory: "128Mi"
      cpu: "10m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
packageRepository:
  image: pnda/platform-package-repository:release5.0
  imagePullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8888
  conf:
    logLevel: INFO
  resources:
    requests:
      memory: "128Mi"
      cpu: "10m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
  persistence:
    enabled: true
    storageClass:
    accessMode: ReadWriteOnce
    size: 5Gi
platformTesting:
  enabled: true
  schedule: "* * * * *"
  image: pnda/platform-testing:latest-py3
  imagePullPolicy: IfNotPresent
  conf:
    logLevel: WARNING
  resources:
    requests:
      memory: "128Mi"
      cpu: "10m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"

## ----------------------------------
## Big Data Requirements Configuration
## ----------------------------------
grafana:
  enabled: true
  sidecar:
    datasources:
      enabled: true
      # label that the configmaps with datasources are marked with
      label: grafana_datasource
  adminUser: "pnda"
  adminPassword: "pnda"
  ingress:
    enabled: true
    hosts:
      - grafana.pnda.io

kafka-manager:
  enabled: true
  image:
    repository: gradiant/kafka-manager
    tag: 2.0.0.2
  zkHosts: "{{ .Release.Name }}-cp-zookeeper:2181"
  clusters:
   - name: "PNDA-Kafka"
     kafkaVersion: "2.0.0"
     jmxEnabled: "true"
     tuning: {}
  ingress:
    enabled: true
    hosts:
      - kafka-manager.pnda.io

# Check https://zero-to-jupyterhub.readthedocs.io/en/latest/ for customize this section
jupyterhub:
  enabled: true
  hub:
    uid: 0
    fsGid: 0
    image:
      name: pnda/k8s-hub
      tag: '0.8.2'
    extraConfig:  
      # to resolve singleuser pods (jupyter-{username}.jupyterhub) through kubernetes DNS
      00-custom-singleuser-hostname: |
         c.KubeSpawner.extra_pod_config = {
            "hostname": "jupyter-{username}",
            "subdomain": "jupyterhub"
         }
  auth:
    type: dummy
    dummy:
      password: pnda
    admin:
      users:
        - pnda
  proxy:
    # edit with your own 32 bytes secretToken (e.g. generate with openssl rand -hex 32)
    secretToken: "83fc7b97f79e48a88dd565397a165ebfa9053e474350bb338448b94c6b19c076"
  singleuser:
    # Workaround  for microk8s https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1189#issuecomment-472601915
    cloudMetadata:
      enabled: true
    serviceAccountName: pnda
    image:
      # Check https://github.com/Gradiant/dockerized-jupyter/blob/master/Dockerfile
      name: gradiant/jupyter
      tag: 5.7.8
    extraEnv:
      SPARKCONF_SPARK_MASTER: "spark://spark-standalone:7077"
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 64m
    hosts:
      - notebooks.pnda.io

# enable kafka and zookeeper confluent components. Disable the rest.
cp-zookeeper:
  enabled: true
  servers: 1
cp-kafka:
  enabled: true
  image: confluentinc/cp-kafka
  imageTag: 5.0.1
  brokers: 1
  configurationOverrides:
    offsets.topic.replication.factor: "1"
    default.replication.factor: "1"
cp-schema-registry:
  enabled: false
cp-kafka-rest:
  enabled: false
cp-kafka-connect:
  enabled: false
cp-ksql-server:
  enabled: false
   
# Setting hdfs-namenode and hdfs-datanode instances to 1
hdfs:
  enabled: true
  # The base hadoop image to use for all components.
  image:
    repository: gradiant/hadoop-base
    tag: 2.7.7
    pullPolicy: IfNotPresent
  conf:
    hdfsSite:
      dfs.replication: 1
  nameNode:
    pdbMinAvailable: 1
  dataNode:
    replicas: 1
    pdbMinAvailable: 1
  persistence:
    nameNode:
      enabled: true
      accessMode: ReadWriteOnce
      size: 4Gi
    dataNode:
      enabled: true
      accessMode: ReadWriteOnce
      size: 4Gi
  ingress:
    nameNode:
      enabled: true
      path: /
      hosts:
      - "hdfs.pnda.io"

# Setting hbase-region-server instances to 1
hbase:
  enabled: true
  regionServer:
    replicas: 1

# Setting opentsdb daemons instances to 1
opentsdb:
  enabled: true
  daemons: 1

# Setting spark-standalone worker instances to 1
spark-standalone:
  enabled: true
  workers: 1
  ingress:
    enabled: true
    hosts:
      - spark.pnda.io
